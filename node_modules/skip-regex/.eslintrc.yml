###########################################################################
#                                                                         #
#   Revised by aMarCruz - 2016-01-06                                      #
#   Follow most of rules from http://standardjs.com/                      #
#   2016-01-19: use 1tbs style for blocks, like in the riot core          #
#   2016-03-05: revised for eslint v2.2, disallow conditional assign      #
#   2016-03-10: allows conditional assigns, shadowing vars in the upper   #
#               scope, and the creation of functions within loops.        #
#   2016-03-11: Don't require empty line after variable declarations      #
#                                                                         #
###########################################################################

root: true

###########################################################################
#   ENVIRONMENT                                                           #
###########################################################################

env:
  node: true
  es6: true

parserOptions:
  sourceType: "module"
  ecmaVersion: 6
  ecmaFeatures:
    impliedStrict: true
    modules: true

###########################################################################
#   GLOBALS                                                               #
###########################################################################

globals:
  riot: false

###########################################################################
#   RECOMMENDED PRESET - mainly for possible errors                       #
# https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js #
###########################################################################

extends:
  "eslint:recommended"

###########################################################################
#   RULES - omitted defaults and rules in eslint:recommended              #
###########################################################################

rules:
  #
  #   POSSIBLE ERRORS
  #
  no-cond-assign: 0                 # core riot style
  no-extra-parens:                  # disallow extra parens, except for conditional assign
    - 2
    - "all"
    - conditionalAssign: false
      returnAssign: false
  valid-jsdoc:
    - 2
    - prefer:
        return: "returns"
      requireReturn: false
      requireReturnDescription: false
  #
  #   BEST PRACTICES
  #
  block-scoped-var: 2               # treat var statements as if they were block scoped (0)
  complexity: [2, 16]               # specify the maximum cyclomatic complexity allowed in a program ([0, 11])
  curly:                            # require curly braces for multiline control statements only
    - 2
    - "multi-line"
  dot-location:                     # dot in a member expression should be on the same line as the property
    - 2
    - "property"
  dot-notation: 1                   # encourages use of dot notation whenever possible ([0, { "allowKeywords": true }])
  eqeqeq:                           # require the use of === and !== (0)
    - 2
    - "smart"
  guard-for-in: 1                   # make sure for-in loops have an if statement (0)
  no-alert: 2                       # disallow the use of alert, confirm, and prompt (0)
  no-caller: 2                      # disallow use of arguments.caller or arguments.callee (0)
  no-div-regex: 2                   # disallow division operators explicitly at beginning of regular expression (0)
  no-else-return: 1                 # disallow else after a return in an if
  no-eval: 2                        # disallow use of eval() (0)
  no-extend-native: 2               # disallow adding to native types (0)
  no-extra-bind: 2                  # disallow unnecessary function binding (0)
  no-floating-decimal: 2            # disallow the use of leading or trailing decimal points in numeric literals (0)
  no-implied-eval: 2                # disallow use of eval()-like methods (0)
  no-invalid-this: 2                # disallow this keywords outside of classes or class-like objects
  no-iterator: 2                    # disallow usage of __iterator__ property (0)
  no-labels: 2                      # disallow use of labeled statements (0)
  no-lone-blocks: 2                 # disallow unnecessary nested blocks (0)
  no-multi-str: 2                   # disallow use of multiline strings (0)
  no-native-reassign: 2             # disallow reassignments of native objects (0)
  no-new: 2                         # disallow use of new operator when not part of the assignment or comparison (0)
  no-new-func: 2                    # disallow use of new operator for Function object
  no-new-wrappers: 2                # disallow creating new instances of String, Number, and Boolean (0)
  no-octal-escape: 2                # disallow use of octal escape sequences in string literals, such as `"Copyright \251"` (0)
  no-proto: 2                       # disallow usage of __proto__ property (0)
  no-return-assign: 1               # disallow use of assignment in return statement (0)
  no-script-url: 2                  # disallow use of javascript urls (0)
  no-self-compare: 2                # disallow comparisons where both sides are exactly the same (0)
  no-sequences: 2                   # disallow use of comma operator (0)
  no-throw-literal: 2               # restrict what can be thrown as an exception
  no-unused-expressions: 1          # disallow usage of expressions in statement position (0)
  no-useless-call: 1                # disallow unnecessary .call() and .apply()
  no-void: 2                        # disallow use of void operator (0)
  no-with: 2                        # disallow use of the with statement (0)
  radix: 2                          # require use of the second argument for parseInt() (0)
  wrap-iife:                        # require immediate function invocation to be wrapped in parentheses (0)
    - 2
    - "inside"
  yoda:                             # require or disallow Yoda conditions (0)
    - 2
    - "never"
  #
  #   VARIABLES
  #
  no-catch-shadow: 2                # disallow the catch clause parameter name being the same as a variable in the outer scope
  no-label-var: 2                   # disallow labels that share a name with a variable (0)
  no-shadow-restricted-names: 2     # disallow shadowing of names such as arguments (0)
  no-undef-init: 2                  # disallow use of undefined when initializing variables (0)
# no-unused-vars: 1                 # disallow declaration of variables that are not used in the code ([2, {"vars": "all", "args": "after-used"}])
  no-use-before-define:             # disallow use of variables before they are defined (0)
    - 2
    - "nofunc"
  #
  #   NODE.JS AND COMMONJS
  #
  handle-callback-err: 2            # enforces error handling in callbacks
  no-mixed-requires: 2              # disallow mixing regular variable and require declarations
  no-new-require: 2                 # disallow use of new operator with the require function (0)
  no-path-concat: 2                 # disallow string concatenation with __dirname and __filename (0)
  #
  #   STYLISTIC ISSUES
  #
  array-bracket-spacing: 2          # disallow spaces inside of brackets ([0, "never"])
  brace-style:                      # require Stroustrup style: `else` must be on its own line ([0, '1tbs'])
    - 1
    - "1tbs"
    - allowSingleLine: true
  camelcase:                        # require camel case names (0)
    - 2
    - properties: "always"
  comma-spacing: 2                  # enforce spacing before and after comma (0)
  comma-style: 2                    # enforce one true comma style ([0, "last"])
  computed-property-spacing:        # disallow spaces inside of computed properties
    - 2
    - "never"
  consistent-this:                  # enforces consistent naming when capturing the current execution context
    - 2
    - "me"
  eol-last: 2                       # enforce newline at the end of file, with no multiple empty lines
  indent:                           # set a specific tab width and case indentation (0)
    - 2
    - 2
    - SwitchCase: 1
  key-spacing: 2                    # enforces spacing between keys and values in object literal properties
                                    # ([0, { "beforeColon": false, "afterColon": true }])
  keyword-spacing: 2                # enforce spacing before and after keywords
  linebreak-style: [2, "unix"]
  max-depth: [1, 5]                 # specify the maximum depth blocks can be nested
  max-len:                          # maximum line length, except for regexes
    - 1
    - 96
    - 4
    - ignoreTrailingComments: true
      ignoreUrls: true
      ignorePattern: "=\\s+/|_regEx\\(|RegExp\\("
  no-control-regex: 1
  max-nested-callbacks: [2, 4]      # specify the maximum depth callbacks can be nested ([0, 2])
  new-cap: 2                        # require a capital letter for constructors (0)
  new-parens: 2                     # disallow the omission of parentheses when invoking a constructor with no arguments (0)
  no-array-constructor: 2           # disallow use of the Array constructor (0)
  no-lonely-if: 2                   # disallow if as the only statement in an else block
  no-multiple-empty-lines:          # disallow multiple empty lines
    - 2
    - max: 2
  no-new-object: 2                  # disallow use of the Object constructor (0)
  no-spaced-func: 2                 # disallow space between function identifier and application (0)
  no-trailing-spaces: 2             # disallow trailing whitespace at the end of lines (0)
  no-unneeded-ternary: 2            # disallow the use of ternary operators when a simpler alternative exists
  operator-linebreak: 2             # [2, "after", { "overrides": { "?": "before" } }]
  quote-props:                      # require quotes around object literal property names only if needed
    - 2
    - "as-needed"
  quotes:                           # specify whether double or single quotes should be used ([0, "double"])
    - 2
    - "single"
    - "avoid-escape"
  semi-spacing: 2                   # prevents the use of spaces before a semicolon in expressions
  semi:                             # require or disallow use of semicolons instead of ASI (0)
    - 2
    - "never"
  space-before-blocks: 2            # require a space before blocks ([0, "always"])
  space-before-function-paren:      # require a space before function parenthesis ([0, "always"])
    - 2
    - anonymous: "always"
      named: "never"
  space-in-parens: 2                # require spaces inside parentheses ([0, "never"])
  space-infix-ops:                  # require spaces around infix operators, except for `var|0` (0)
    - 2
    - int32Hint: false
  space-unary-ops: 2                # require spaces after new, delete, typeof, void, yield, disallow spaces for ++, --, etc
  object-curly-spacing:             # require spaces inside brackets
    - 2
    - "always"
    - objectsInObjects: false
  #
  #   ES6
  #
  arrow-spacing: 2
  no-confusing-arrow:                 # disallow arrow syntax in places where it could be confused with a comparison operator
    - 2
    - allowParens: true
  no-duplicate-imports:
    - 2
    - includeExports: true
  no-useless-computed-key: 2
  no-useless-rename: 2
  prefer-const:
    - 2
    - destructuring: "all"
  template-curly-spacing: 2

  no-restricted-syntax:             # disallow use of `with` statements in code
    - 2
    - "WithStatement"               # dangerous
    - "ForOfStatement"              # too slow
